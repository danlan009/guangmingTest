<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once Config::get('fan.thrift_url').'/thrift/Thrift.php';


class PresetInfo {
  static $_TSPEC;

  public $vmCode = null;
  public $expiredTime = null;
  public $isOnlineShopCode = null;
  public $wait = 0;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'vmCode',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'expiredTime',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'isOnlineShopCode',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'wait',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['vmCode'])) {
        $this->vmCode = $vals['vmCode'];
      }
      if (isset($vals['expiredTime'])) {
        $this->expiredTime = $vals['expiredTime'];
      }
      if (isset($vals['isOnlineShopCode'])) {
        $this->isOnlineShopCode = $vals['isOnlineShopCode'];
      }
      if (isset($vals['wait'])) {
        $this->wait = $vals['wait'];
      }
    }
  }

  public function getName() {
    return 'PresetInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->vmCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->expiredTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isOnlineShopCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->wait);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PresetInfo');
    if ($this->vmCode !== null) {
      $xfer += $output->writeFieldBegin('vmCode', TType::STRING, 1);
      $xfer += $output->writeString($this->vmCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expiredTime !== null) {
      $xfer += $output->writeFieldBegin('expiredTime', TType::STRING, 2);
      $xfer += $output->writeString($this->expiredTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isOnlineShopCode !== null) {
      $xfer += $output->writeFieldBegin('isOnlineShopCode', TType::I32, 3);
      $xfer += $output->writeI32($this->isOnlineShopCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wait !== null) {
      $xfer += $output->writeFieldBegin('wait', TType::I32, 4);
      $xfer += $output->writeI32($this->wait);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TabCategory {
  static $_TSPEC;

  public $typeId = null;
  public $typeDesc = null;
  public $isDefault = 0;
  public $url = null;
  public $isOther = 0;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'typeId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'typeDesc',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'isDefault',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'url',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'isOther',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['typeId'])) {
        $this->typeId = $vals['typeId'];
      }
      if (isset($vals['typeDesc'])) {
        $this->typeDesc = $vals['typeDesc'];
      }
      if (isset($vals['isDefault'])) {
        $this->isDefault = $vals['isDefault'];
      }
      if (isset($vals['url'])) {
        $this->url = $vals['url'];
      }
      if (isset($vals['isOther'])) {
        $this->isOther = $vals['isOther'];
      }
    }
  }

  public function getName() {
    return 'TabCategory';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->typeId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->typeDesc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isDefault);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isOther);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TabCategory');
    if ($this->typeId !== null) {
      $xfer += $output->writeFieldBegin('typeId', TType::I32, 1);
      $xfer += $output->writeI32($this->typeId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->typeDesc !== null) {
      $xfer += $output->writeFieldBegin('typeDesc', TType::STRING, 2);
      $xfer += $output->writeString($this->typeDesc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isDefault !== null) {
      $xfer += $output->writeFieldBegin('isDefault', TType::I32, 3);
      $xfer += $output->writeI32($this->isDefault);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->url !== null) {
      $xfer += $output->writeFieldBegin('url', TType::STRING, 4);
      $xfer += $output->writeString($this->url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isOther !== null) {
      $xfer += $output->writeFieldBegin('isOther', TType::I32, 5);
      $xfer += $output->writeI32($this->isOther);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class VmInfo {
  static $_TSPEC;

  public $code = null;
  public $name = null;
  public $address = null;
  public $status = 0;
  public $message = null;
  public $typeId = 1;
  public $typeName = null;
  public $distance = null;
  public $sellStatus = 1;
  public $bookingSupport = 0;
  public $lat = null;
  public $lng = null;
  public $isFavorite = 0;
  public $isSnack = 0;
  public $qrcodeSupport = 0;
  public $provinces = null;
  public $areaName = null;
  public $icon = null;
  public $orgId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'address',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'typeId',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'typeName',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'distance',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'sellStatus',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'bookingSupport',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'lat',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'lng',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'isFavorite',
          'type' => TType::I32,
          ),
        16 => array(
          'var' => 'isSnack',
          'type' => TType::I32,
          ),
        17 => array(
          'var' => 'qrcodeSupport',
          'type' => TType::I32,
          ),
        18 => array(
          'var' => 'provinces',
          'type' => TType::STRING,
          ),
        19 => array(
          'var' => 'areaName',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'icon',
          'type' => TType::STRING,
          ),
        21 => array(
          'var' => 'orgId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['address'])) {
        $this->address = $vals['address'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['typeId'])) {
        $this->typeId = $vals['typeId'];
      }
      if (isset($vals['typeName'])) {
        $this->typeName = $vals['typeName'];
      }
      if (isset($vals['distance'])) {
        $this->distance = $vals['distance'];
      }
      if (isset($vals['sellStatus'])) {
        $this->sellStatus = $vals['sellStatus'];
      }
      if (isset($vals['bookingSupport'])) {
        $this->bookingSupport = $vals['bookingSupport'];
      }
      if (isset($vals['lat'])) {
        $this->lat = $vals['lat'];
      }
      if (isset($vals['lng'])) {
        $this->lng = $vals['lng'];
      }
      if (isset($vals['isFavorite'])) {
        $this->isFavorite = $vals['isFavorite'];
      }
      if (isset($vals['isSnack'])) {
        $this->isSnack = $vals['isSnack'];
      }
      if (isset($vals['qrcodeSupport'])) {
        $this->qrcodeSupport = $vals['qrcodeSupport'];
      }
      if (isset($vals['provinces'])) {
        $this->provinces = $vals['provinces'];
      }
      if (isset($vals['areaName'])) {
        $this->areaName = $vals['areaName'];
      }
      if (isset($vals['icon'])) {
        $this->icon = $vals['icon'];
      }
      if (isset($vals['orgId'])) {
        $this->orgId = $vals['orgId'];
      }
    }
  }

  public function getName() {
    return 'VmInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->address);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->typeId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->typeName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->distance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sellStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->bookingSupport);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lat);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lng);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isFavorite);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isSnack);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->qrcodeSupport);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->provinces);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->areaName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->icon);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->orgId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('VmInfo');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::STRING, 1);
      $xfer += $output->writeString($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->address !== null) {
      $xfer += $output->writeFieldBegin('address', TType::STRING, 3);
      $xfer += $output->writeString($this->address);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 4);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 5);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->typeId !== null) {
      $xfer += $output->writeFieldBegin('typeId', TType::I32, 6);
      $xfer += $output->writeI32($this->typeId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->typeName !== null) {
      $xfer += $output->writeFieldBegin('typeName', TType::STRING, 7);
      $xfer += $output->writeString($this->typeName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->distance !== null) {
      $xfer += $output->writeFieldBegin('distance', TType::STRING, 8);
      $xfer += $output->writeString($this->distance);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sellStatus !== null) {
      $xfer += $output->writeFieldBegin('sellStatus', TType::I32, 9);
      $xfer += $output->writeI32($this->sellStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bookingSupport !== null) {
      $xfer += $output->writeFieldBegin('bookingSupport', TType::I32, 10);
      $xfer += $output->writeI32($this->bookingSupport);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lat !== null) {
      $xfer += $output->writeFieldBegin('lat', TType::STRING, 12);
      $xfer += $output->writeString($this->lat);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lng !== null) {
      $xfer += $output->writeFieldBegin('lng', TType::STRING, 13);
      $xfer += $output->writeString($this->lng);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isFavorite !== null) {
      $xfer += $output->writeFieldBegin('isFavorite', TType::I32, 15);
      $xfer += $output->writeI32($this->isFavorite);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isSnack !== null) {
      $xfer += $output->writeFieldBegin('isSnack', TType::I32, 16);
      $xfer += $output->writeI32($this->isSnack);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->qrcodeSupport !== null) {
      $xfer += $output->writeFieldBegin('qrcodeSupport', TType::I32, 17);
      $xfer += $output->writeI32($this->qrcodeSupport);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->provinces !== null) {
      $xfer += $output->writeFieldBegin('provinces', TType::STRING, 18);
      $xfer += $output->writeString($this->provinces);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->areaName !== null) {
      $xfer += $output->writeFieldBegin('areaName', TType::STRING, 19);
      $xfer += $output->writeString($this->areaName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->icon !== null) {
      $xfer += $output->writeFieldBegin('icon', TType::STRING, 20);
      $xfer += $output->writeString($this->icon);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orgId !== null) {
      $xfer += $output->writeFieldBegin('orgId', TType::I32, 21);
      $xfer += $output->writeI32($this->orgId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BoxInfo {
  static $_TSPEC;

  public $boxId = 0;
  public $boxCode = "";
  public $boxVmCode = "";

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'boxId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'boxCode',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'boxVmCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['boxId'])) {
        $this->boxId = $vals['boxId'];
      }
      if (isset($vals['boxCode'])) {
        $this->boxCode = $vals['boxCode'];
      }
      if (isset($vals['boxVmCode'])) {
        $this->boxVmCode = $vals['boxVmCode'];
      }
    }
  }

  public function getName() {
    return 'BoxInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->boxId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->boxCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->boxVmCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BoxInfo');
    if ($this->boxId !== null) {
      $xfer += $output->writeFieldBegin('boxId', TType::I32, 1);
      $xfer += $output->writeI32($this->boxId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->boxCode !== null) {
      $xfer += $output->writeFieldBegin('boxCode', TType::STRING, 2);
      $xfer += $output->writeString($this->boxCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->boxVmCode !== null) {
      $xfer += $output->writeFieldBegin('boxVmCode', TType::STRING, 3);
      $xfer += $output->writeString($this->boxVmCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Product {
  static $_TSPEC;

  public $productId = null;
  public $shortName = null;
  public $fullName = null;
  public $offeredPrice = null;
  public $retailPrice = null;
  public $num = null;
  public $picMap = null;
  public $discountRate = 100;
  public $brandId = null;
  public $brandName = null;
  public $typeId = null;
  public $typeName = null;
  public $description = null;
  public $reason = null;
  public $icon = null;
  public $actionId = null;
  public $endTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'productId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'shortName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'fullName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'offeredPrice',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'retailPrice',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'num',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'picMap',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        8 => array(
          'var' => 'discountRate',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'brandId',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'brandName',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'typeId',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'typeName',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'reason',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'icon',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'actionId',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'endTime',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['productId'])) {
        $this->productId = $vals['productId'];
      }
      if (isset($vals['shortName'])) {
        $this->shortName = $vals['shortName'];
      }
      if (isset($vals['fullName'])) {
        $this->fullName = $vals['fullName'];
      }
      if (isset($vals['offeredPrice'])) {
        $this->offeredPrice = $vals['offeredPrice'];
      }
      if (isset($vals['retailPrice'])) {
        $this->retailPrice = $vals['retailPrice'];
      }
      if (isset($vals['num'])) {
        $this->num = $vals['num'];
      }
      if (isset($vals['picMap'])) {
        $this->picMap = $vals['picMap'];
      }
      if (isset($vals['discountRate'])) {
        $this->discountRate = $vals['discountRate'];
      }
      if (isset($vals['brandId'])) {
        $this->brandId = $vals['brandId'];
      }
      if (isset($vals['brandName'])) {
        $this->brandName = $vals['brandName'];
      }
      if (isset($vals['typeId'])) {
        $this->typeId = $vals['typeId'];
      }
      if (isset($vals['typeName'])) {
        $this->typeName = $vals['typeName'];
      }
      if (isset($vals['description'])) {
        $this->description = $vals['description'];
      }
      if (isset($vals['reason'])) {
        $this->reason = $vals['reason'];
      }
      if (isset($vals['icon'])) {
        $this->icon = $vals['icon'];
      }
      if (isset($vals['actionId'])) {
        $this->actionId = $vals['actionId'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
    }
  }

  public function getName() {
    return 'Product';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->productId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->shortName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fullName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->offeredPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retailPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::MAP) {
            $this->picMap = array();
            $_size0 = 0;
            $_ktype1 = 0;
            $_vtype2 = 0;
            $xfer += $input->readMapBegin($_ktype1, $_vtype2, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $key5 = 0;
              $val6 = '';
              $xfer += $input->readI32($key5);
              $xfer += $input->readString($val6);
              $this->picMap[$key5] = $val6;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->discountRate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->brandId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->brandName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->typeId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->typeName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->description);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reason);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->icon);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->actionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Product');
    if ($this->productId !== null) {
      $xfer += $output->writeFieldBegin('productId', TType::I32, 1);
      $xfer += $output->writeI32($this->productId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->shortName !== null) {
      $xfer += $output->writeFieldBegin('shortName', TType::STRING, 2);
      $xfer += $output->writeString($this->shortName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fullName !== null) {
      $xfer += $output->writeFieldBegin('fullName', TType::STRING, 3);
      $xfer += $output->writeString($this->fullName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offeredPrice !== null) {
      $xfer += $output->writeFieldBegin('offeredPrice', TType::I32, 4);
      $xfer += $output->writeI32($this->offeredPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->retailPrice !== null) {
      $xfer += $output->writeFieldBegin('retailPrice', TType::I32, 5);
      $xfer += $output->writeI32($this->retailPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->num !== null) {
      $xfer += $output->writeFieldBegin('num', TType::I32, 6);
      $xfer += $output->writeI32($this->num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->picMap !== null) {
      if (!is_array($this->picMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('picMap', TType::MAP, 7);
      {
        $output->writeMapBegin(TType::I32, TType::STRING, count($this->picMap));
        {
          foreach ($this->picMap as $kiter7 => $viter8)
          {
            $xfer += $output->writeI32($kiter7);
            $xfer += $output->writeString($viter8);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->discountRate !== null) {
      $xfer += $output->writeFieldBegin('discountRate', TType::I32, 8);
      $xfer += $output->writeI32($this->discountRate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->brandId !== null) {
      $xfer += $output->writeFieldBegin('brandId', TType::I32, 9);
      $xfer += $output->writeI32($this->brandId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->brandName !== null) {
      $xfer += $output->writeFieldBegin('brandName', TType::STRING, 10);
      $xfer += $output->writeString($this->brandName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->typeId !== null) {
      $xfer += $output->writeFieldBegin('typeId', TType::I32, 11);
      $xfer += $output->writeI32($this->typeId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->typeName !== null) {
      $xfer += $output->writeFieldBegin('typeName', TType::STRING, 12);
      $xfer += $output->writeString($this->typeName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->description !== null) {
      $xfer += $output->writeFieldBegin('description', TType::STRING, 13);
      $xfer += $output->writeString($this->description);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reason !== null) {
      $xfer += $output->writeFieldBegin('reason', TType::STRING, 14);
      $xfer += $output->writeString($this->reason);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->icon !== null) {
      $xfer += $output->writeFieldBegin('icon', TType::STRING, 15);
      $xfer += $output->writeString($this->icon);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->actionId !== null) {
      $xfer += $output->writeFieldBegin('actionId', TType::STRING, 16);
      $xfer += $output->writeString($this->actionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::STRING, 17);
      $xfer += $output->writeString($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SpProduct {
  static $_TSPEC;

  public $productId = null;
  public $name = null;
  public $saleName = null;
  public $offeredPrice = null;
  public $retailPrice = null;
  public $num = null;
  public $pic = null;
  public $recommend = null;
  public $brandId = null;
  public $brandName = null;
  public $typeId = null;
  public $typeName = null;
  public $description = null;
  public $reason = null;
  public $tasteExp = null;
  public $actionId = null;
  public $endTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'productId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'saleName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'offeredPrice',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'retailPrice',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'num',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'pic',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'recommend',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'brandId',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'brandName',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'typeId',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'typeName',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'reason',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'tasteExp',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'actionId',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'endTime',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['productId'])) {
        $this->productId = $vals['productId'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['saleName'])) {
        $this->saleName = $vals['saleName'];
      }
      if (isset($vals['offeredPrice'])) {
        $this->offeredPrice = $vals['offeredPrice'];
      }
      if (isset($vals['retailPrice'])) {
        $this->retailPrice = $vals['retailPrice'];
      }
      if (isset($vals['num'])) {
        $this->num = $vals['num'];
      }
      if (isset($vals['pic'])) {
        $this->pic = $vals['pic'];
      }
      if (isset($vals['recommend'])) {
        $this->recommend = $vals['recommend'];
      }
      if (isset($vals['brandId'])) {
        $this->brandId = $vals['brandId'];
      }
      if (isset($vals['brandName'])) {
        $this->brandName = $vals['brandName'];
      }
      if (isset($vals['typeId'])) {
        $this->typeId = $vals['typeId'];
      }
      if (isset($vals['typeName'])) {
        $this->typeName = $vals['typeName'];
      }
      if (isset($vals['description'])) {
        $this->description = $vals['description'];
      }
      if (isset($vals['reason'])) {
        $this->reason = $vals['reason'];
      }
      if (isset($vals['tasteExp'])) {
        $this->tasteExp = $vals['tasteExp'];
      }
      if (isset($vals['actionId'])) {
        $this->actionId = $vals['actionId'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
    }
  }

  public function getName() {
    return 'SpProduct';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->productId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->saleName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->offeredPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retailPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->recommend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->brandId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->brandName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->typeId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->typeName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->description);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reason);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tasteExp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->actionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SpProduct');
    if ($this->productId !== null) {
      $xfer += $output->writeFieldBegin('productId', TType::I32, 1);
      $xfer += $output->writeI32($this->productId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->saleName !== null) {
      $xfer += $output->writeFieldBegin('saleName', TType::STRING, 3);
      $xfer += $output->writeString($this->saleName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offeredPrice !== null) {
      $xfer += $output->writeFieldBegin('offeredPrice', TType::I32, 4);
      $xfer += $output->writeI32($this->offeredPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->retailPrice !== null) {
      $xfer += $output->writeFieldBegin('retailPrice', TType::I32, 5);
      $xfer += $output->writeI32($this->retailPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->num !== null) {
      $xfer += $output->writeFieldBegin('num', TType::I32, 6);
      $xfer += $output->writeI32($this->num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pic !== null) {
      $xfer += $output->writeFieldBegin('pic', TType::STRING, 7);
      $xfer += $output->writeString($this->pic);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->recommend !== null) {
      $xfer += $output->writeFieldBegin('recommend', TType::STRING, 8);
      $xfer += $output->writeString($this->recommend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->brandId !== null) {
      $xfer += $output->writeFieldBegin('brandId', TType::I32, 9);
      $xfer += $output->writeI32($this->brandId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->brandName !== null) {
      $xfer += $output->writeFieldBegin('brandName', TType::STRING, 10);
      $xfer += $output->writeString($this->brandName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->typeId !== null) {
      $xfer += $output->writeFieldBegin('typeId', TType::I32, 11);
      $xfer += $output->writeI32($this->typeId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->typeName !== null) {
      $xfer += $output->writeFieldBegin('typeName', TType::STRING, 12);
      $xfer += $output->writeString($this->typeName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->description !== null) {
      $xfer += $output->writeFieldBegin('description', TType::STRING, 13);
      $xfer += $output->writeString($this->description);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reason !== null) {
      $xfer += $output->writeFieldBegin('reason', TType::STRING, 14);
      $xfer += $output->writeString($this->reason);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tasteExp !== null) {
      $xfer += $output->writeFieldBegin('tasteExp', TType::STRING, 15);
      $xfer += $output->writeString($this->tasteExp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->actionId !== null) {
      $xfer += $output->writeFieldBegin('actionId', TType::STRING, 16);
      $xfer += $output->writeString($this->actionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::STRING, 17);
      $xfer += $output->writeString($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SearchResult {
  static $_TSPEC;

  public $status = 0;
  public $product = null;
  public $boxInfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'product',
          'type' => TType::STRUCT,
          'class' => 'Product',
          ),
        3 => array(
          'var' => 'boxInfo',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'BoxInfo',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['product'])) {
        $this->product = $vals['product'];
      }
      if (isset($vals['boxInfo'])) {
        $this->boxInfo = $vals['boxInfo'];
      }
    }
  }

  public function getName() {
    return 'SearchResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->product = new Product();
            $xfer += $this->product->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->boxInfo = array();
            $_size9 = 0;
            $_etype12 = 0;
            $xfer += $input->readListBegin($_etype12, $_size9);
            for ($_i13 = 0; $_i13 < $_size9; ++$_i13)
            {
              $elem14 = null;
              $elem14 = new BoxInfo();
              $xfer += $elem14->read($input);
              $this->boxInfo []= $elem14;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SearchResult');
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 1);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->product !== null) {
      if (!is_object($this->product)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('product', TType::STRUCT, 2);
      $xfer += $this->product->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->boxInfo !== null) {
      if (!is_array($this->boxInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('boxInfo', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->boxInfo));
        {
          foreach ($this->boxInfo as $iter15)
          {
            $xfer += $iter15->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PreSaleParam {
  static $_TSPEC;

  public $productId = null;
  public $preSaleTypeId = null;
  public $spTypeId = null;
  public $tabId = 1;
  public $spBegin = null;
  public $spEnd = null;
  public $spRefund = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'productId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'preSaleTypeId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'spTypeId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'tabId',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'spBegin',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'spEnd',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'spRefund',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['productId'])) {
        $this->productId = $vals['productId'];
      }
      if (isset($vals['preSaleTypeId'])) {
        $this->preSaleTypeId = $vals['preSaleTypeId'];
      }
      if (isset($vals['spTypeId'])) {
        $this->spTypeId = $vals['spTypeId'];
      }
      if (isset($vals['tabId'])) {
        $this->tabId = $vals['tabId'];
      }
      if (isset($vals['spBegin'])) {
        $this->spBegin = $vals['spBegin'];
      }
      if (isset($vals['spEnd'])) {
        $this->spEnd = $vals['spEnd'];
      }
      if (isset($vals['spRefund'])) {
        $this->spRefund = $vals['spRefund'];
      }
    }
  }

  public function getName() {
    return 'PreSaleParam';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->productId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->preSaleTypeId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->spTypeId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->tabId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->spBegin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->spEnd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->spRefund);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PreSaleParam');
    if ($this->productId !== null) {
      $xfer += $output->writeFieldBegin('productId', TType::I32, 1);
      $xfer += $output->writeI32($this->productId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->preSaleTypeId !== null) {
      $xfer += $output->writeFieldBegin('preSaleTypeId', TType::I32, 2);
      $xfer += $output->writeI32($this->preSaleTypeId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spTypeId !== null) {
      $xfer += $output->writeFieldBegin('spTypeId', TType::I32, 3);
      $xfer += $output->writeI32($this->spTypeId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tabId !== null) {
      $xfer += $output->writeFieldBegin('tabId', TType::I32, 4);
      $xfer += $output->writeI32($this->tabId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spBegin !== null) {
      $xfer += $output->writeFieldBegin('spBegin', TType::STRING, 5);
      $xfer += $output->writeString($this->spBegin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spEnd !== null) {
      $xfer += $output->writeFieldBegin('spEnd', TType::STRING, 6);
      $xfer += $output->writeString($this->spEnd);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spRefund !== null) {
      $xfer += $output->writeFieldBegin('spRefund', TType::STRING, 7);
      $xfer += $output->writeString($this->spRefund);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Order {
  static $_TSPEC;

  public $sellerId = null;
  public $uid = null;
  public $payTypeId = null;
  public $typeName = null;
  public $deviceId = null;
  public $couponId = null;
  public $vmId = null;
  public $phone = null;
  public $productId = null;
  public $cost = null;
  public $pickupCode = null;
  public $source = 1;
  public $isBooking = 0;
  public $boxCode = null;
  public $boxId = null;
  public $orderId = null;
  public $name = null;
  public $address = null;
  public $createdTime = null;
  public $expiredTime = null;
  public $completedTime = null;
  public $status = null;
  public $productShortName = null;
  public $productFullName = null;
  public $pic = null;
  public $discountPrice = null;
  public $retailPrice = null;
  public $channelId = null;
  public $couponName = null;
  public $giftPoint = 0;
  public $vendoutType = 0;
  public $tabCategoryId = null;
  public $tabCategoryDesc = null;
  public $dealLog = null;
  public $brandId = null;
  public $brandName = null;
  public $isOnlineShopCode = null;
  public $appType = null;
  public $psParam = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sellerId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'payTypeId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'typeName',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'deviceId',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'couponId',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'vmId',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'productId',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'cost',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'pickupCode',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'source',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'isBooking',
          'type' => TType::I32,
          ),
        14 => array(
          'var' => 'boxCode',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'boxId',
          'type' => TType::I32,
          ),
        16 => array(
          'var' => 'orderId',
          'type' => TType::I64,
          ),
        17 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'address',
          'type' => TType::STRING,
          ),
        19 => array(
          'var' => 'createdTime',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'expiredTime',
          'type' => TType::STRING,
          ),
        21 => array(
          'var' => 'completedTime',
          'type' => TType::STRING,
          ),
        22 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        23 => array(
          'var' => 'productShortName',
          'type' => TType::STRING,
          ),
        24 => array(
          'var' => 'productFullName',
          'type' => TType::STRING,
          ),
        25 => array(
          'var' => 'pic',
          'type' => TType::STRING,
          ),
        26 => array(
          'var' => 'discountPrice',
          'type' => TType::I32,
          ),
        27 => array(
          'var' => 'retailPrice',
          'type' => TType::I32,
          ),
        28 => array(
          'var' => 'channelId',
          'type' => TType::I32,
          ),
        29 => array(
          'var' => 'couponName',
          'type' => TType::STRING,
          ),
        30 => array(
          'var' => 'giftPoint',
          'type' => TType::I32,
          ),
        31 => array(
          'var' => 'vendoutType',
          'type' => TType::I32,
          ),
        32 => array(
          'var' => 'tabCategoryId',
          'type' => TType::I32,
          ),
        33 => array(
          'var' => 'tabCategoryDesc',
          'type' => TType::STRING,
          ),
        34 => array(
          'var' => 'dealLog',
          'type' => TType::STRING,
          ),
        35 => array(
          'var' => 'brandId',
          'type' => TType::I32,
          ),
        36 => array(
          'var' => 'brandName',
          'type' => TType::STRING,
          ),
        37 => array(
          'var' => 'isOnlineShopCode',
          'type' => TType::I32,
          ),
        38 => array(
          'var' => 'appType',
          'type' => TType::STRING,
          ),
        39 => array(
          'var' => 'psParam',
          'type' => TType::STRUCT,
          'class' => 'PreSaleParam',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sellerId'])) {
        $this->sellerId = $vals['sellerId'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['payTypeId'])) {
        $this->payTypeId = $vals['payTypeId'];
      }
      if (isset($vals['typeName'])) {
        $this->typeName = $vals['typeName'];
      }
      if (isset($vals['deviceId'])) {
        $this->deviceId = $vals['deviceId'];
      }
      if (isset($vals['couponId'])) {
        $this->couponId = $vals['couponId'];
      }
      if (isset($vals['vmId'])) {
        $this->vmId = $vals['vmId'];
      }
      if (isset($vals['phone'])) {
        $this->phone = $vals['phone'];
      }
      if (isset($vals['productId'])) {
        $this->productId = $vals['productId'];
      }
      if (isset($vals['cost'])) {
        $this->cost = $vals['cost'];
      }
      if (isset($vals['pickupCode'])) {
        $this->pickupCode = $vals['pickupCode'];
      }
      if (isset($vals['source'])) {
        $this->source = $vals['source'];
      }
      if (isset($vals['isBooking'])) {
        $this->isBooking = $vals['isBooking'];
      }
      if (isset($vals['boxCode'])) {
        $this->boxCode = $vals['boxCode'];
      }
      if (isset($vals['boxId'])) {
        $this->boxId = $vals['boxId'];
      }
      if (isset($vals['orderId'])) {
        $this->orderId = $vals['orderId'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['address'])) {
        $this->address = $vals['address'];
      }
      if (isset($vals['createdTime'])) {
        $this->createdTime = $vals['createdTime'];
      }
      if (isset($vals['expiredTime'])) {
        $this->expiredTime = $vals['expiredTime'];
      }
      if (isset($vals['completedTime'])) {
        $this->completedTime = $vals['completedTime'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['productShortName'])) {
        $this->productShortName = $vals['productShortName'];
      }
      if (isset($vals['productFullName'])) {
        $this->productFullName = $vals['productFullName'];
      }
      if (isset($vals['pic'])) {
        $this->pic = $vals['pic'];
      }
      if (isset($vals['discountPrice'])) {
        $this->discountPrice = $vals['discountPrice'];
      }
      if (isset($vals['retailPrice'])) {
        $this->retailPrice = $vals['retailPrice'];
      }
      if (isset($vals['channelId'])) {
        $this->channelId = $vals['channelId'];
      }
      if (isset($vals['couponName'])) {
        $this->couponName = $vals['couponName'];
      }
      if (isset($vals['giftPoint'])) {
        $this->giftPoint = $vals['giftPoint'];
      }
      if (isset($vals['vendoutType'])) {
        $this->vendoutType = $vals['vendoutType'];
      }
      if (isset($vals['tabCategoryId'])) {
        $this->tabCategoryId = $vals['tabCategoryId'];
      }
      if (isset($vals['tabCategoryDesc'])) {
        $this->tabCategoryDesc = $vals['tabCategoryDesc'];
      }
      if (isset($vals['dealLog'])) {
        $this->dealLog = $vals['dealLog'];
      }
      if (isset($vals['brandId'])) {
        $this->brandId = $vals['brandId'];
      }
      if (isset($vals['brandName'])) {
        $this->brandName = $vals['brandName'];
      }
      if (isset($vals['isOnlineShopCode'])) {
        $this->isOnlineShopCode = $vals['isOnlineShopCode'];
      }
      if (isset($vals['appType'])) {
        $this->appType = $vals['appType'];
      }
      if (isset($vals['psParam'])) {
        $this->psParam = $vals['psParam'];
      }
    }
  }

  public function getName() {
    return 'Order';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sellerId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->payTypeId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->typeName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->deviceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->couponId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->vmId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->productId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cost);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pickupCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->source);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isBooking);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->boxCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->boxId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->orderId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->address);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->createdTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->expiredTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->completedTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->productShortName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->productFullName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->discountPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->retailPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 28:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->channelId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 29:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->couponName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->giftPoint);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vendoutType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 32:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->tabCategoryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 33:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tabCategoryDesc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 34:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dealLog);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 35:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->brandId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 36:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->brandName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 37:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isOnlineShopCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 38:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 39:
          if ($ftype == TType::STRUCT) {
            $this->psParam = new PreSaleParam();
            $xfer += $this->psParam->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Order');
    if ($this->sellerId !== null) {
      $xfer += $output->writeFieldBegin('sellerId', TType::I32, 1);
      $xfer += $output->writeI32($this->sellerId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 2);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payTypeId !== null) {
      $xfer += $output->writeFieldBegin('payTypeId', TType::I32, 3);
      $xfer += $output->writeI32($this->payTypeId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->typeName !== null) {
      $xfer += $output->writeFieldBegin('typeName', TType::STRING, 4);
      $xfer += $output->writeString($this->typeName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deviceId !== null) {
      $xfer += $output->writeFieldBegin('deviceId', TType::I32, 5);
      $xfer += $output->writeI32($this->deviceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->couponId !== null) {
      $xfer += $output->writeFieldBegin('couponId', TType::I32, 6);
      $xfer += $output->writeI32($this->couponId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vmId !== null) {
      $xfer += $output->writeFieldBegin('vmId', TType::STRING, 7);
      $xfer += $output->writeString($this->vmId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phone !== null) {
      $xfer += $output->writeFieldBegin('phone', TType::STRING, 8);
      $xfer += $output->writeString($this->phone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->productId !== null) {
      $xfer += $output->writeFieldBegin('productId', TType::I32, 9);
      $xfer += $output->writeI32($this->productId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cost !== null) {
      $xfer += $output->writeFieldBegin('cost', TType::I32, 10);
      $xfer += $output->writeI32($this->cost);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pickupCode !== null) {
      $xfer += $output->writeFieldBegin('pickupCode', TType::STRING, 11);
      $xfer += $output->writeString($this->pickupCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source !== null) {
      $xfer += $output->writeFieldBegin('source', TType::I32, 12);
      $xfer += $output->writeI32($this->source);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isBooking !== null) {
      $xfer += $output->writeFieldBegin('isBooking', TType::I32, 13);
      $xfer += $output->writeI32($this->isBooking);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->boxCode !== null) {
      $xfer += $output->writeFieldBegin('boxCode', TType::STRING, 14);
      $xfer += $output->writeString($this->boxCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->boxId !== null) {
      $xfer += $output->writeFieldBegin('boxId', TType::I32, 15);
      $xfer += $output->writeI32($this->boxId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderId !== null) {
      $xfer += $output->writeFieldBegin('orderId', TType::I64, 16);
      $xfer += $output->writeI64($this->orderId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 17);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->address !== null) {
      $xfer += $output->writeFieldBegin('address', TType::STRING, 18);
      $xfer += $output->writeString($this->address);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdTime !== null) {
      $xfer += $output->writeFieldBegin('createdTime', TType::STRING, 19);
      $xfer += $output->writeString($this->createdTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expiredTime !== null) {
      $xfer += $output->writeFieldBegin('expiredTime', TType::STRING, 20);
      $xfer += $output->writeString($this->expiredTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->completedTime !== null) {
      $xfer += $output->writeFieldBegin('completedTime', TType::STRING, 21);
      $xfer += $output->writeString($this->completedTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 22);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->productShortName !== null) {
      $xfer += $output->writeFieldBegin('productShortName', TType::STRING, 23);
      $xfer += $output->writeString($this->productShortName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->productFullName !== null) {
      $xfer += $output->writeFieldBegin('productFullName', TType::STRING, 24);
      $xfer += $output->writeString($this->productFullName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pic !== null) {
      $xfer += $output->writeFieldBegin('pic', TType::STRING, 25);
      $xfer += $output->writeString($this->pic);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->discountPrice !== null) {
      $xfer += $output->writeFieldBegin('discountPrice', TType::I32, 26);
      $xfer += $output->writeI32($this->discountPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->retailPrice !== null) {
      $xfer += $output->writeFieldBegin('retailPrice', TType::I32, 27);
      $xfer += $output->writeI32($this->retailPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->channelId !== null) {
      $xfer += $output->writeFieldBegin('channelId', TType::I32, 28);
      $xfer += $output->writeI32($this->channelId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->couponName !== null) {
      $xfer += $output->writeFieldBegin('couponName', TType::STRING, 29);
      $xfer += $output->writeString($this->couponName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->giftPoint !== null) {
      $xfer += $output->writeFieldBegin('giftPoint', TType::I32, 30);
      $xfer += $output->writeI32($this->giftPoint);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vendoutType !== null) {
      $xfer += $output->writeFieldBegin('vendoutType', TType::I32, 31);
      $xfer += $output->writeI32($this->vendoutType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tabCategoryId !== null) {
      $xfer += $output->writeFieldBegin('tabCategoryId', TType::I32, 32);
      $xfer += $output->writeI32($this->tabCategoryId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tabCategoryDesc !== null) {
      $xfer += $output->writeFieldBegin('tabCategoryDesc', TType::STRING, 33);
      $xfer += $output->writeString($this->tabCategoryDesc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dealLog !== null) {
      $xfer += $output->writeFieldBegin('dealLog', TType::STRING, 34);
      $xfer += $output->writeString($this->dealLog);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->brandId !== null) {
      $xfer += $output->writeFieldBegin('brandId', TType::I32, 35);
      $xfer += $output->writeI32($this->brandId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->brandName !== null) {
      $xfer += $output->writeFieldBegin('brandName', TType::STRING, 36);
      $xfer += $output->writeString($this->brandName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isOnlineShopCode !== null) {
      $xfer += $output->writeFieldBegin('isOnlineShopCode', TType::I32, 37);
      $xfer += $output->writeI32($this->isOnlineShopCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appType !== null) {
      $xfer += $output->writeFieldBegin('appType', TType::STRING, 38);
      $xfer += $output->writeString($this->appType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->psParam !== null) {
      if (!is_object($this->psParam)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('psParam', TType::STRUCT, 39);
      $xfer += $this->psParam->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderCode {
  static $_TSPEC;

  public $orderId = null;
  public $innerCode = null;
  public $boxSeq = null;
  public $boxCode = null;
  public $pickupCode = null;
  public $flag = 0;
  public $dealLog = null;
  public $providerId = null;
  public $providerName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orderId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'innerCode',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'boxSeq',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'boxCode',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'pickupCode',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'flag',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'dealLog',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'providerId',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'providerName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['orderId'])) {
        $this->orderId = $vals['orderId'];
      }
      if (isset($vals['innerCode'])) {
        $this->innerCode = $vals['innerCode'];
      }
      if (isset($vals['boxSeq'])) {
        $this->boxSeq = $vals['boxSeq'];
      }
      if (isset($vals['boxCode'])) {
        $this->boxCode = $vals['boxCode'];
      }
      if (isset($vals['pickupCode'])) {
        $this->pickupCode = $vals['pickupCode'];
      }
      if (isset($vals['flag'])) {
        $this->flag = $vals['flag'];
      }
      if (isset($vals['dealLog'])) {
        $this->dealLog = $vals['dealLog'];
      }
      if (isset($vals['providerId'])) {
        $this->providerId = $vals['providerId'];
      }
      if (isset($vals['providerName'])) {
        $this->providerName = $vals['providerName'];
      }
    }
  }

  public function getName() {
    return 'OrderCode';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->orderId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->innerCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->boxSeq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->boxCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pickupCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->flag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dealLog);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->providerId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->providerName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderCode');
    if ($this->orderId !== null) {
      $xfer += $output->writeFieldBegin('orderId', TType::I64, 1);
      $xfer += $output->writeI64($this->orderId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->innerCode !== null) {
      $xfer += $output->writeFieldBegin('innerCode', TType::STRING, 2);
      $xfer += $output->writeString($this->innerCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->boxSeq !== null) {
      $xfer += $output->writeFieldBegin('boxSeq', TType::I32, 3);
      $xfer += $output->writeI32($this->boxSeq);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->boxCode !== null) {
      $xfer += $output->writeFieldBegin('boxCode', TType::STRING, 4);
      $xfer += $output->writeString($this->boxCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pickupCode !== null) {
      $xfer += $output->writeFieldBegin('pickupCode', TType::STRING, 5);
      $xfer += $output->writeString($this->pickupCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->flag !== null) {
      $xfer += $output->writeFieldBegin('flag', TType::I32, 6);
      $xfer += $output->writeI32($this->flag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dealLog !== null) {
      $xfer += $output->writeFieldBegin('dealLog', TType::STRING, 7);
      $xfer += $output->writeString($this->dealLog);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->providerId !== null) {
      $xfer += $output->writeFieldBegin('providerId', TType::I32, 8);
      $xfer += $output->writeI32($this->providerId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->providerName !== null) {
      $xfer += $output->writeFieldBegin('providerName', TType::STRING, 9);
      $xfer += $output->writeString($this->providerName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderStatus {
  static $_TSPEC;

  public $orderId = null;
  public $status = null;
  public $originaStatus = null;
  public $dealLog = null;
  public $sysId = 0;
  public $reasonId = null;
  public $vendoutType = 0;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'orderId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'originaStatus',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'dealLog',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'sysId',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'reasonId',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'vendoutType',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['orderId'])) {
        $this->orderId = $vals['orderId'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['originaStatus'])) {
        $this->originaStatus = $vals['originaStatus'];
      }
      if (isset($vals['dealLog'])) {
        $this->dealLog = $vals['dealLog'];
      }
      if (isset($vals['sysId'])) {
        $this->sysId = $vals['sysId'];
      }
      if (isset($vals['reasonId'])) {
        $this->reasonId = $vals['reasonId'];
      }
      if (isset($vals['vendoutType'])) {
        $this->vendoutType = $vals['vendoutType'];
      }
    }
  }

  public function getName() {
    return 'OrderStatus';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->orderId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->originaStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dealLog);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sysId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->reasonId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->vendoutType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderStatus');
    if ($this->orderId !== null) {
      $xfer += $output->writeFieldBegin('orderId', TType::I64, 1);
      $xfer += $output->writeI64($this->orderId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 2);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->originaStatus !== null) {
      $xfer += $output->writeFieldBegin('originaStatus', TType::I32, 3);
      $xfer += $output->writeI32($this->originaStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dealLog !== null) {
      $xfer += $output->writeFieldBegin('dealLog', TType::STRING, 4);
      $xfer += $output->writeString($this->dealLog);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sysId !== null) {
      $xfer += $output->writeFieldBegin('sysId', TType::I32, 5);
      $xfer += $output->writeI32($this->sysId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reasonId !== null) {
      $xfer += $output->writeFieldBegin('reasonId', TType::I32, 6);
      $xfer += $output->writeI32($this->reasonId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vendoutType !== null) {
      $xfer += $output->writeFieldBegin('vendoutType', TType::I32, 7);
      $xfer += $output->writeI32($this->vendoutType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SellPeriod {
  static $_TSPEC;

  public $typeId = null;
  public $typeName = null;
  public $sellBegin = null;
  public $sellEnd = null;
  public $avaNum = 0;
  public $spRefund = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'typeId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'typeName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'sellBegin',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'sellEnd',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'avaNum',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'spRefund',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['typeId'])) {
        $this->typeId = $vals['typeId'];
      }
      if (isset($vals['typeName'])) {
        $this->typeName = $vals['typeName'];
      }
      if (isset($vals['sellBegin'])) {
        $this->sellBegin = $vals['sellBegin'];
      }
      if (isset($vals['sellEnd'])) {
        $this->sellEnd = $vals['sellEnd'];
      }
      if (isset($vals['avaNum'])) {
        $this->avaNum = $vals['avaNum'];
      }
      if (isset($vals['spRefund'])) {
        $this->spRefund = $vals['spRefund'];
      }
    }
  }

  public function getName() {
    return 'SellPeriod';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->typeId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->typeName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sellBegin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sellEnd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->avaNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->spRefund);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SellPeriod');
    if ($this->typeId !== null) {
      $xfer += $output->writeFieldBegin('typeId', TType::I32, 1);
      $xfer += $output->writeI32($this->typeId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->typeName !== null) {
      $xfer += $output->writeFieldBegin('typeName', TType::STRING, 2);
      $xfer += $output->writeString($this->typeName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sellBegin !== null) {
      $xfer += $output->writeFieldBegin('sellBegin', TType::STRING, 3);
      $xfer += $output->writeString($this->sellBegin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sellEnd !== null) {
      $xfer += $output->writeFieldBegin('sellEnd', TType::STRING, 4);
      $xfer += $output->writeString($this->sellEnd);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->avaNum !== null) {
      $xfer += $output->writeFieldBegin('avaNum', TType::I32, 5);
      $xfer += $output->writeI32($this->avaNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spRefund !== null) {
      $xfer += $output->writeFieldBegin('spRefund', TType::STRING, 6);
      $xfer += $output->writeString($this->spRefund);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PreSaleInfo {
  static $_TSPEC;

  public $typeId = null;
  public $typeName = null;
  public $psBegin = null;
  public $psEnd = null;
  public $spList = null;
  public $products = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'typeId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'typeName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'psBegin',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'psEnd',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'spList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'SellPeriod',
            ),
          ),
        6 => array(
          'var' => 'products',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'Product',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['typeId'])) {
        $this->typeId = $vals['typeId'];
      }
      if (isset($vals['typeName'])) {
        $this->typeName = $vals['typeName'];
      }
      if (isset($vals['psBegin'])) {
        $this->psBegin = $vals['psBegin'];
      }
      if (isset($vals['psEnd'])) {
        $this->psEnd = $vals['psEnd'];
      }
      if (isset($vals['spList'])) {
        $this->spList = $vals['spList'];
      }
      if (isset($vals['products'])) {
        $this->products = $vals['products'];
      }
    }
  }

  public function getName() {
    return 'PreSaleInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->typeId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->typeName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->psBegin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->psEnd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->spList = array();
            $_size16 = 0;
            $_etype19 = 0;
            $xfer += $input->readListBegin($_etype19, $_size16);
            for ($_i20 = 0; $_i20 < $_size16; ++$_i20)
            {
              $elem21 = null;
              $elem21 = new SellPeriod();
              $xfer += $elem21->read($input);
              $this->spList []= $elem21;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->products = array();
            $_size22 = 0;
            $_etype25 = 0;
            $xfer += $input->readListBegin($_etype25, $_size22);
            for ($_i26 = 0; $_i26 < $_size22; ++$_i26)
            {
              $elem27 = null;
              $elem27 = new Product();
              $xfer += $elem27->read($input);
              $this->products []= $elem27;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PreSaleInfo');
    if ($this->typeId !== null) {
      $xfer += $output->writeFieldBegin('typeId', TType::I32, 1);
      $xfer += $output->writeI32($this->typeId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->typeName !== null) {
      $xfer += $output->writeFieldBegin('typeName', TType::STRING, 2);
      $xfer += $output->writeString($this->typeName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->psBegin !== null) {
      $xfer += $output->writeFieldBegin('psBegin', TType::STRING, 3);
      $xfer += $output->writeString($this->psBegin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->psEnd !== null) {
      $xfer += $output->writeFieldBegin('psEnd', TType::STRING, 4);
      $xfer += $output->writeString($this->psEnd);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spList !== null) {
      if (!is_array($this->spList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('spList', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRUCT, count($this->spList));
        {
          foreach ($this->spList as $iter28)
          {
            $xfer += $iter28->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->products !== null) {
      if (!is_array($this->products)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('products', TType::LST, 6);
      {
        $output->writeListBegin(TType::STRUCT, count($this->products));
        {
          foreach ($this->products as $iter29)
          {
            $xfer += $iter29->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ServerNode {
  static $_TSPEC;

  public $vmCode = null;
  public $nodeIp = null;
  public $nodePort = null;
  public $nodeStatus = null;
  public $nodeTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'vmCode',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'nodeIp',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'nodePort',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'nodeStatus',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'nodeTime',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['vmCode'])) {
        $this->vmCode = $vals['vmCode'];
      }
      if (isset($vals['nodeIp'])) {
        $this->nodeIp = $vals['nodeIp'];
      }
      if (isset($vals['nodePort'])) {
        $this->nodePort = $vals['nodePort'];
      }
      if (isset($vals['nodeStatus'])) {
        $this->nodeStatus = $vals['nodeStatus'];
      }
      if (isset($vals['nodeTime'])) {
        $this->nodeTime = $vals['nodeTime'];
      }
    }
  }

  public function getName() {
    return 'ServerNode';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->vmCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nodeIp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->nodePort);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->nodeStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nodeTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ServerNode');
    if ($this->vmCode !== null) {
      $xfer += $output->writeFieldBegin('vmCode', TType::STRING, 1);
      $xfer += $output->writeString($this->vmCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nodeIp !== null) {
      $xfer += $output->writeFieldBegin('nodeIp', TType::STRING, 2);
      $xfer += $output->writeString($this->nodeIp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nodePort !== null) {
      $xfer += $output->writeFieldBegin('nodePort', TType::I32, 3);
      $xfer += $output->writeI32($this->nodePort);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nodeStatus !== null) {
      $xfer += $output->writeFieldBegin('nodeStatus', TType::I32, 4);
      $xfer += $output->writeI32($this->nodeStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nodeTime !== null) {
      $xfer += $output->writeFieldBegin('nodeTime', TType::STRING, 5);
      $xfer += $output->writeString($this->nodeTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AllProductList {
  static $_TSPEC;

  public $tcPidMap = null;
  public $pInfoMap = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tcPidMap',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::LST,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::LST,
            'etype' => TType::I32,
            'elem' => array(
              'type' => TType::I32,
              ),
            ),
          ),
        2 => array(
          'var' => 'pInfoMap',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => 'Product',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tcPidMap'])) {
        $this->tcPidMap = $vals['tcPidMap'];
      }
      if (isset($vals['pInfoMap'])) {
        $this->pInfoMap = $vals['pInfoMap'];
      }
    }
  }

  public function getName() {
    return 'AllProductList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->tcPidMap = array();
            $_size30 = 0;
            $_ktype31 = 0;
            $_vtype32 = 0;
            $xfer += $input->readMapBegin($_ktype31, $_vtype32, $_size30);
            for ($_i34 = 0; $_i34 < $_size30; ++$_i34)
            {
              $key35 = 0;
              $val36 = array();
              $xfer += $input->readI32($key35);
              $val36 = array();
              $_size37 = 0;
              $_etype40 = 0;
              $xfer += $input->readListBegin($_etype40, $_size37);
              for ($_i41 = 0; $_i41 < $_size37; ++$_i41)
              {
                $elem42 = null;
                $xfer += $input->readI32($elem42);
                $val36 []= $elem42;
              }
              $xfer += $input->readListEnd();
              $this->tcPidMap[$key35] = $val36;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->pInfoMap = array();
            $_size43 = 0;
            $_ktype44 = 0;
            $_vtype45 = 0;
            $xfer += $input->readMapBegin($_ktype44, $_vtype45, $_size43);
            for ($_i47 = 0; $_i47 < $_size43; ++$_i47)
            {
              $key48 = 0;
              $val49 = new Product();
              $xfer += $input->readI32($key48);
              $val49 = new Product();
              $xfer += $val49->read($input);
              $this->pInfoMap[$key48] = $val49;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AllProductList');
    if ($this->tcPidMap !== null) {
      if (!is_array($this->tcPidMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('tcPidMap', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::I32, TType::LST, count($this->tcPidMap));
        {
          foreach ($this->tcPidMap as $kiter50 => $viter51)
          {
            $xfer += $output->writeI32($kiter50);
            {
              $output->writeListBegin(TType::I32, count($viter51));
              {
                foreach ($viter51 as $iter52)
                {
                  $xfer += $output->writeI32($iter52);
                }
              }
              $output->writeListEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pInfoMap !== null) {
      if (!is_array($this->pInfoMap)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('pInfoMap', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::I32, TType::STRUCT, count($this->pInfoMap));
        {
          foreach ($this->pInfoMap as $kiter53 => $viter54)
          {
            $xfer += $output->writeI32($kiter53);
            $xfer += $viter54->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class QrCodeBox {
  static $_TSPEC;

  public $vmCode = null;
  public $boxCode = null;
  public $boxSeq = null;
  public $bldId = 0;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'vmCode',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'boxCode',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'boxSeq',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'bldId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['vmCode'])) {
        $this->vmCode = $vals['vmCode'];
      }
      if (isset($vals['boxCode'])) {
        $this->boxCode = $vals['boxCode'];
      }
      if (isset($vals['boxSeq'])) {
        $this->boxSeq = $vals['boxSeq'];
      }
      if (isset($vals['bldId'])) {
        $this->bldId = $vals['bldId'];
      }
    }
  }

  public function getName() {
    return 'QrCodeBox';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->vmCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->boxCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->boxSeq);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->bldId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('QrCodeBox');
    if ($this->vmCode !== null) {
      $xfer += $output->writeFieldBegin('vmCode', TType::STRING, 1);
      $xfer += $output->writeString($this->vmCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->boxCode !== null) {
      $xfer += $output->writeFieldBegin('boxCode', TType::STRING, 2);
      $xfer += $output->writeString($this->boxCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->boxSeq !== null) {
      $xfer += $output->writeFieldBegin('boxSeq', TType::I32, 3);
      $xfer += $output->writeI32($this->boxSeq);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bldId !== null) {
      $xfer += $output->writeFieldBegin('bldId', TType::I32, 4);
      $xfer += $output->writeI32($this->bldId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserPayment {
  static $_TSPEC;

  public $updId = null;
  public $uid = null;
  public $payTypeId = null;
  public $payTypeName = null;
  public $balance = null;
  public $giftPoint = 0;
  public $statusNote = null;
  public $status = null;
  public $deviceId = null;
  public $dealLog = null;
  public $orderId = null;
  public $created = null;
  public $payTime = null;
  public $uboxAppType = null;
  public $source = null;
  public $rechargeType = null;
  public $remark = null;
  public $activeId = null;
  public $giftType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'updId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'payTypeId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'payTypeName',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'balance',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'giftPoint',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'statusNote',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'deviceId',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'dealLog',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'orderId',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'created',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'payTime',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'uboxAppType',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'source',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'rechargeType',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'remark',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'activeId',
          'type' => TType::I32,
          ),
        19 => array(
          'var' => 'giftType',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['updId'])) {
        $this->updId = $vals['updId'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
      if (isset($vals['payTypeId'])) {
        $this->payTypeId = $vals['payTypeId'];
      }
      if (isset($vals['payTypeName'])) {
        $this->payTypeName = $vals['payTypeName'];
      }
      if (isset($vals['balance'])) {
        $this->balance = $vals['balance'];
      }
      if (isset($vals['giftPoint'])) {
        $this->giftPoint = $vals['giftPoint'];
      }
      if (isset($vals['statusNote'])) {
        $this->statusNote = $vals['statusNote'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['deviceId'])) {
        $this->deviceId = $vals['deviceId'];
      }
      if (isset($vals['dealLog'])) {
        $this->dealLog = $vals['dealLog'];
      }
      if (isset($vals['orderId'])) {
        $this->orderId = $vals['orderId'];
      }
      if (isset($vals['created'])) {
        $this->created = $vals['created'];
      }
      if (isset($vals['payTime'])) {
        $this->payTime = $vals['payTime'];
      }
      if (isset($vals['uboxAppType'])) {
        $this->uboxAppType = $vals['uboxAppType'];
      }
      if (isset($vals['source'])) {
        $this->source = $vals['source'];
      }
      if (isset($vals['rechargeType'])) {
        $this->rechargeType = $vals['rechargeType'];
      }
      if (isset($vals['remark'])) {
        $this->remark = $vals['remark'];
      }
      if (isset($vals['activeId'])) {
        $this->activeId = $vals['activeId'];
      }
      if (isset($vals['giftType'])) {
        $this->giftType = $vals['giftType'];
      }
    }
  }

  public function getName() {
    return 'UserPayment';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->updId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->payTypeId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->payTypeName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->balance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->giftPoint);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->statusNote);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->deviceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dealLog);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->created);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->payTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uboxAppType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->source);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->rechargeType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->remark);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->activeId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->giftType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserPayment');
    if ($this->updId !== null) {
      $xfer += $output->writeFieldBegin('updId', TType::I64, 1);
      $xfer += $output->writeI64($this->updId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 2);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payTypeId !== null) {
      $xfer += $output->writeFieldBegin('payTypeId', TType::I32, 3);
      $xfer += $output->writeI32($this->payTypeId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payTypeName !== null) {
      $xfer += $output->writeFieldBegin('payTypeName', TType::STRING, 4);
      $xfer += $output->writeString($this->payTypeName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->balance !== null) {
      $xfer += $output->writeFieldBegin('balance', TType::I32, 5);
      $xfer += $output->writeI32($this->balance);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->giftPoint !== null) {
      $xfer += $output->writeFieldBegin('giftPoint', TType::I32, 6);
      $xfer += $output->writeI32($this->giftPoint);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusNote !== null) {
      $xfer += $output->writeFieldBegin('statusNote', TType::STRING, 7);
      $xfer += $output->writeString($this->statusNote);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 8);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deviceId !== null) {
      $xfer += $output->writeFieldBegin('deviceId', TType::STRING, 9);
      $xfer += $output->writeString($this->deviceId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dealLog !== null) {
      $xfer += $output->writeFieldBegin('dealLog', TType::STRING, 10);
      $xfer += $output->writeString($this->dealLog);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderId !== null) {
      $xfer += $output->writeFieldBegin('orderId', TType::STRING, 11);
      $xfer += $output->writeString($this->orderId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->created !== null) {
      $xfer += $output->writeFieldBegin('created', TType::STRING, 12);
      $xfer += $output->writeString($this->created);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payTime !== null) {
      $xfer += $output->writeFieldBegin('payTime', TType::STRING, 13);
      $xfer += $output->writeString($this->payTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uboxAppType !== null) {
      $xfer += $output->writeFieldBegin('uboxAppType', TType::STRING, 14);
      $xfer += $output->writeString($this->uboxAppType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source !== null) {
      $xfer += $output->writeFieldBegin('source', TType::STRING, 15);
      $xfer += $output->writeString($this->source);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rechargeType !== null) {
      $xfer += $output->writeFieldBegin('rechargeType', TType::STRING, 16);
      $xfer += $output->writeString($this->rechargeType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->remark !== null) {
      $xfer += $output->writeFieldBegin('remark', TType::STRING, 17);
      $xfer += $output->writeString($this->remark);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->activeId !== null) {
      $xfer += $output->writeFieldBegin('activeId', TType::I32, 18);
      $xfer += $output->writeI32($this->activeId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->giftType !== null) {
      $xfer += $output->writeFieldBegin('giftType', TType::STRING, 19);
      $xfer += $output->writeString($this->giftType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UPayParam {
  static $_TSPEC;

  public $updId = 0;
  public $orderId = null;
  public $deviceId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'updId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'orderId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'deviceId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['updId'])) {
        $this->updId = $vals['updId'];
      }
      if (isset($vals['orderId'])) {
        $this->orderId = $vals['orderId'];
      }
      if (isset($vals['deviceId'])) {
        $this->deviceId = $vals['deviceId'];
      }
    }
  }

  public function getName() {
    return 'UPayParam';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->updId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->orderId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->deviceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UPayParam');
    if ($this->updId !== null) {
      $xfer += $output->writeFieldBegin('updId', TType::I64, 1);
      $xfer += $output->writeI64($this->updId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->orderId !== null) {
      $xfer += $output->writeFieldBegin('orderId', TType::STRING, 2);
      $xfer += $output->writeString($this->orderId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deviceId !== null) {
      $xfer += $output->writeFieldBegin('deviceId', TType::STRING, 3);
      $xfer += $output->writeString($this->deviceId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Context {
  static $_TSPEC;

  public $channel = null;
  public $uid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'channel',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'uid',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['channel'])) {
        $this->channel = $vals['channel'];
      }
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
    }
  }

  public function getName() {
    return 'Context';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->channel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Context');
    if ($this->channel !== null) {
      $xfer += $output->writeFieldBegin('channel', TType::I32, 1);
      $xfer += $output->writeI32($this->channel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I32, 2);
      $xfer += $output->writeI32($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Response {
  static $_TSPEC;

  public $flag = null;
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'flag',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['flag'])) {
        $this->flag = $vals['flag'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'Response';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->flag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Response');
    if ($this->flag !== null) {
      $xfer += $output->writeFieldBegin('flag', TType::I32, 1);
      $xfer += $output->writeI32($this->flag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UException extends TException {
  static $_TSPEC;

  public $errorCode = null;
  public $errorMessage = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'errorCode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'errorMessage',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['errorCode'])) {
        $this->errorCode = $vals['errorCode'];
      }
      if (isset($vals['errorMessage'])) {
        $this->errorMessage = $vals['errorMessage'];
      }
    }
  }

  public function getName() {
    return 'UException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->errorCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UException');
    if ($this->errorCode !== null) {
      $xfer += $output->writeFieldBegin('errorCode', TType::I32, 1);
      $xfer += $output->writeI32($this->errorCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorMessage !== null) {
      $xfer += $output->writeFieldBegin('errorMessage', TType::STRING, 2);
      $xfer += $output->writeString($this->errorMessage);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
